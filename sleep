#!/bin/bash
#
# location - /etc/cron.hourly/sleep
# Dependencies - curl
# Summary - Shuts down a computer if certain criteria are met:-
  # no declared clients present
  # no declared Sony TVs present
  # no declared processes present
  # no declared users present
  # no tvheadend activity taking place (recording, streaming etc.)
  # no upcoming recording (within a specified margin)

# ================= START OF BASIC SETTINGS =================
# Set basic settings as required

# set debug mode
debug=1

# which actions to take
do_client=1
do_tv_sony=1
do_process=1
do_user=1
do_tvheadend=1
do_wakeup=1

# credentials
tvh_login='tvheadend'
tvh_password='w9e3s7t8'
trans_password='w9e3s7t8'
tv_sony_auth_psk='sony'

# declare clients that, if online, prevent the server from shutting down
macClient=()
macClient+=('my:cl:ie:nt:ma:c1') #computer1
macClient+=('my:cl:ie:nt:ma:c2') #computer2
# add more as required...

# declare Sony TVs that, if active, prevent the server from shutting down
macTV=()
macTV+=('my:so:ny:tv:ma:c1') #sonytv1
macTV+=('my:so:ny:tv:ma:c2') #sonytv2
# add more as required...

# declare processes that, if running, prevent server from shutting down
process=()
process+=($(ps -A | grep -E '(^|\s)cp($|\s)' | wc -l)) #cp command
process+=($(ps -A | grep -E '(^|\s)scp($|\s)' | wc -l)) #scp command
process+=($(ps -A | grep 'HandBrakeCLI' | wc -l)) #handbrake
#transmission - Count active downloads only
process+=($( transmission-remote --auth transmission:$trans_password --list | sed '1d;$d' | grep -v Stopped | grep -v Idle | grep -v Seeding | grep -v Finished | wc -l)) 
# add more as required...

# minimum time in seconds needed for consecutive shutdown AND startup
safe_margin_shutdown=600
# minimum time in seconds needed to start up the computer properly
safe_margin_startup=180
# maximum time in hours not to wake up for updating EPG
epg_hours=48

# ================= END OF BASIC SETTINGS =================

total_client=0
total_tv_sony=0
total_process=0
total_user=0
total_tvheadend=0
will_record_soon=0

# prevent script running during boot
if [[ $((debug)) -eq 0 ]]; then
  sleep 150s
fi;

if [[ $((debug)) -eq 1 ]]; then
  echo "DEBUG MODE"
fi;

# set language
export LANG=C

if [ $do_client -eq 1 ]; then

  # obtain client ip addresses from mac addresses
  ipClient=()
    
  for mac in "${macClient[@]}"
  do
    ipClient+=($(arp -n | grep $mac | awk ' { print $1 } '))
  done

  # check for online clients
  for ip in "${ipClient[@]}"
  do
    if [ ! -z $ip ]; then
      counter=$(ping -c1 $ip | grep 'received' | awk -F ',' '{print $2}' | awk '{ print $1}')
      total_client=$((total_client+counter))
    fi;
  done        

fi

if [ $do_tv_sony -eq 1 ]; then

  # check for active Sony TVs
  for mac in "${macTV[@]}"
  do
    ip=$(arp -n | grep $mac | awk ' { print $1 } ')
      
    j=$(curl -s -X POST -H "Content-Type: application/json" -H "X-Auth-PSK: $tv_sony_auth_psk" -d '{"id":3,"method":"getPowerStatus","version":"1.0","params":[]}' http://$ip/sony/system | grep '"active"' | wc -l)
      
    if [ $j -eq 1 ]; then
      total_tv_sony=$((total_tv_sony+1))
    fi;
    
  done

fi

if [ $do_process -eq 1 ]; then

  # check for active processes
  for i in "${process[@]}"
  do
    total_process=$((total_process+i))
  done

fi

if [ $do_user -eq 1 ]; then

  # check for active users
  total_user=$(who | wc -l)

fi

if [ $do_tvheadend -eq 1 ]; then

  # check for tvheadend activity - recording, streaming etc.
  total_tvheadend=$(curl -s --user $tvh_login:$tvh_password http://127.0.0.1:9981/status.xml | grep "subscriptions" | awk -F '>' '{print $2}' | awk -F '<' '{print $1}')

  # retrieve and calculate wake up data
    if [ $total_tvheadend -eq 0 ]; then
      wake_after_min=$((epg_hours*60))
      if [ $(curl -s --user $tvh_login:$tvh_password 127.0.0.1:9981/status.xml | grep "next" | awk -F '>' '{print $2}' | awk -F '<' '{print $1}' | wc -l) -gt 0 ]; then
        wake_after_min_temp=$(curl -s --user $tvh_login:$tvh_password 127.0.0.1:9981/status.xml | grep "next" | awk -F '>' '{print $2}' | awk -F '<' '{print $1}')
        if [ $wake_after_min -gt $wake_after_min_temp ]; then
          wake_after_min=$wake_after_min_temp
        fi
      fi
    else
      wake_after_min=0
  fi
  wake_after_secs=$((wake_after_min*60))

  # check safe margin shutdown
  if [ $safe_margin_shutdown -gt $wake_after_secs ]; then
    will_record_soon=1
  fi

fi

if [ $do_wakeup -eq 1 ]; then

  # set RTC wake up time
  stop_date=$(date +%s)
  wake_date=$((stop_date+wake_after_secs-safe_margin_startup))
  echo 0 > /sys/class/rtc/rtc0/wakealarm
  echo $wake_date > /sys/class/rtc/rtc0/wakealarm

fi

# REPORTS after running the script manually

# about clients
if [ $total_client -ne 0 ]; then
    echo "Active clients detected ($total_client)" 
  else
    echo "No clients detected" 
fi 

# about Sony TVs
if [ $total_tv_sony -ne 0 ]; then
    echo "Active Sony TVs detected ($total_tv_sony)" 
  else
    echo "No Sony TVs detected" 
fi 

# about users
if [ $total_user -ne 0 ]; then
    echo "Active users detected ($total_user)"  
  else
    echo "No users detected" 
fi 

# about processes
if [ $total_process -ne 0 ]; then
    echo "Active processes detected ($total_process)"  
  else
    echo "No processes detected" 
fi 

# about tvheadend activity
if [ $total_tvheadend -ne 0 ]; then
    echo "Some tvheadend activity detected ($total_tvheadend)" 
  else
    echo "No tvheadend activity detected" 
fi 

# about recording
if [ $will_record_soon -ne 0 ]; then
    echo "Recording in progress or due to start soon" 
  else
    echo "Not recording" 
fi

# about time
if [ $do_wakeup -ne 0 ]; then
    echo "Next wake-up @ `date -d @$wake_date +"%T %d/%m/%Y"`" 
  else
    echo "No wake-up set" 
fi

# end of REPORTS

# final check will result in shutdown if
  # no declared clients present
  # no declared processes present
  # no declared users present
  # no tvheadend activity taking place (recording, streaming etc.)
  # no upcoming recording (within a specified margin)

if [ $total_tvheadend -eq 0 -a $total_process -eq 0 -a $total_client -eq 0 -a $total_tv_sony -eq 0 -a $total_user -eq 0 -a $will_record_soon -eq 0 ]; then
    echo "Do shutdown in 10 seconds"
    
    if [[ debug -eq 0 ]]; then
      sleep 10s
      sudo shutdown -h now
    fi;
  else
    echo "Not shutting down this time"
fi
